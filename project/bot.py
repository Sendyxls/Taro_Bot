import random

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton,
    LabeledPrice, PreCheckoutQuery, Message
)
from openai import OpenAI
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = "7549107815:AAFnvC8Fe9FoSAHGBtdSgVpW8TrVzP6YDVY"
GPT_API_KEY = "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"
client = OpenAI(api_key=GPT_API_KEY, base_url="https://openrouter.ai/api/v1")
SHOP_ID = "1061384"
PROVIDER_TOKEN = "381764678:TEST:116332"
CURRENCY = "RUB"

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ ---
TAROT_CARDS = [
    # –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã (22 –∫–∞—Ä—Ç—ã)
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç",
    "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
    "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ",
    "–°—É–¥", "–ú–∏—Ä",

    # –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã (56 –∫–∞—Ä—Ç)
    # –ñ–µ–∑–ª—ã
    "–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ü—è—Ç—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤",
    "–®–µ—Å—Ç—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–°–µ–º—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–í–æ—Å—å–º—ë—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤",
    "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤",

    # –ö—É–±–∫–∏
    "–¢—É–∑ –ö—É–±–∫–æ–≤", "–î–≤–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–¢—Ä–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–ü—è—Ç—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤",
    "–®–µ—Å—Ç—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–°–µ–º—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–í–æ—Å—å–º—ë—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ–≤—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ö—É–±–∫–æ–≤",
    "–ü–∞–∂ –ö—É–±–∫–æ–≤", "–†—ã—Ü–∞—Ä—å –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫–æ–≤",

    # –ú–µ—á–∏
    "–¢—É–∑ –ú–µ—á–µ–π", "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π", "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–ü—è—Ç—ë—Ä–∫–∞ –ú–µ—á–µ–π",
    "–®–µ—Å—Ç—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–°–µ–º—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–í–æ—Å—å–º—ë—Ä–∫–∞ –ú–µ—á–µ–π", "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π",
    "–ü–∞–∂ –ú–µ—á–µ–π", "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π",

    # –ü–µ–Ω—Ç–∞–∫–ª–∏
    "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–≤–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–¢—Ä–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ü—è—Ç—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
    "–®–µ—Å—Ç—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–°–µ–º—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–í–æ—Å—å–º—ë—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ–≤—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π",
    "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π"
]
# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class TarotState(StatesGroup):
    waiting_for_question = State()

class PostPaymentState(StatesGroup):
    waiting_for_post_payment_input = State()

# --- –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç ---
def draw_tarot_cards():
    return [f"{card} (–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if random.choice([True, False]) else card for card in random.sample(TAROT_CARDS, 3)]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –æ—Ç GPT ---
def get_tarot_interpretation_llama(question, cards):
    try:
        with open("Promt.txt", "r", encoding="utf-8") as file:
            content = file.read().strip()
        full_prompt = f"{content}\n\n–í–æ–ø—Ä–æ—Å: {question}. –í—ã–ø–∞–ª–∏ –∫–∞—Ä—Ç—ã: {', '.join(cards)}."

        response = client.chat.completions.create(
            model="deepseek/deepseek-chat-v3-0324:free",  # –∏–ª–∏ deepseek-chat
            messages=[
                {"role": "system", "content": "You are a helpful assistant"},
                {"role": "user", "content": full_prompt},
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def send_welcome(message: Message):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üîÆ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text="ü§î–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?")]
    ], resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç,! –Ø Enigma üîÆ \n"
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ ‚Äî –∑–µ—Ä–∫–∞–ª–æ —Ç–≤–æ–µ–π –¥—É—à–∏ \n"
                         "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–∏—Ö –∫–∞—Ä—Ç üåü \n"
                         "üîÆ –ì–æ—Ç–æ–≤(–∞) –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ?", reply_markup=keyboard)

@dp.message(F.text == "ü§î–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
async def explain(message: Message):
    await message.answer("üîÆ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Enigma! \n"
                         "–¢—ã –ø–æ–ø–∞–ª —Å—é–¥–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ ‚Äî –∫–∞—Ä—Ç—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–≤–æ–π —Ç–∞–Ω–µ—Ü –≤–æ–∫—Ä—É–≥ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –°–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –∏ –∫–æ–≥–¥–∞ Enigma –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–æ, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –î—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –¢–∞—Ä–æ –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –∏ –¥–∞—Ç—å —Ç–µ–±–µ –º—É–¥—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã ‚ú® \n"
                         "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? \n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä: \n"
                         "‚ùå¬´–ß—Ç–æ –º–µ–Ω—è –∂–¥—ë—Ç?¬ª ‚Äî —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å. \n"
                         "‚úÖ¬´–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å [–∏–º—è]?¬ª ‚Äî —á—ë—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. \n"
                         "–î–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî –∫–∞—Ä—Ç—ã —É–∂–µ –∂–¥—É—Ç —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...üÉè")

@dp.message(F.text == "üîÆ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def choose_theme(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üíñ –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")],
        [KeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏")],
        [KeyboardButton(text="üåÄ –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –¥—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å")],
        [KeyboardButton(text="üîÆ –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É:", reply_markup=markup)

@dp.message(F.text.in_(["üíñ –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏", "üåÄ –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –¥—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å", "üîÆ –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"]))
async def ask_question(message: Message, state: FSMContext):
    await message.answer("‚ú® –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TarotState.waiting_for_question)

@dp.message(TarotState.waiting_for_question)
async def process_tarot_reading(message: Message, state: FSMContext):
    question = message.text
    cards = draw_tarot_cards()
    interpretation =  get_tarot_interpretation_llama(question, cards)
    await message.answer(
        f"‚ú® –¢–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥:\n1Ô∏è‚É£ {cards[0]}\n2Ô∏è‚É£ {cards[1]}\n3Ô∏è‚É£ {cards[2]}\n\nüîÆ –¢—Ä–∞–∫—Ç–æ–≤–∫–∞:\n{interpretation}"
    )
    await ask_for_feedback(message)
    await state.clear()

async def ask_for_feedback(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üëç –ù—Ä–∞–≤–∏—Ç—Å—è"), KeyboardButton(text="üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")]
    ])
    await message.answer("–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–∞—Å–∫–ª–∞–¥?", reply_markup=keyboard)

@dp.message(F.text == "üëç –ù—Ä–∞–≤–∏—Ç—Å—è")
async def like(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")],
        [KeyboardButton(text="‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å")]
    ])
    await message.answer("–ü–æ—Ö–æ–∂–µ, –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –∑–∞–≥–æ–≤–æ—Ä–∏–ª–∏ —Å —Ç–æ–±–æ–π! üîÆ‚ú® "
                         "–ò—Ö –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–æ—Å—å —Ç–µ–±–µ, –Ω–æ —ç—Ç–æ –ª–∏—à—å —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏. "
                         "–•–æ—á–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç? "
                         "–ü–æ–ª—É—á–∏ –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –±–æ–ª—å—à–µ! üÉèüî•", reply_markup=markup)

@dp.message(F.text == "üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")
async def dislike(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")],
        [KeyboardButton(text="‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å")]
    ])
    await message.answer("–ù–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ —Ç—ã –æ–∂–∏–¥–∞–ª? "
                         "ü§î –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. "
                         "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ –ª–∏—á–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç –≥–ª—É–±–∂–µ "
                         "—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üîÆ‚ú®", reply_markup=markup)

@dp.message(F.text == "üîÆ –ü–æ–ª—É—á–∏—Ç—å –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
async def show_payment_options(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=get_purchase_keyboard())

@dp.message(F.text == "‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å")
async def back_to_start(message: Message):
    await send_welcome(message)

def get_purchase_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• PRO (–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥) ‚Äì 99‚ÇΩ", callback_data="buy_1")],
        [InlineKeyboardButton(text="üíé MASTER (–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑) ‚Äì 199‚ÇΩ", callback_data="buy_2")],
        [InlineKeyboardButton(text="üëë ULTIMATE (–¢–∞—Ä–æ-–∫–æ—É—á–∏–Ω–≥) ‚Äì 399‚ÇΩ", callback_data="buy_3")],
    ])

@dp.callback_query(F.data.startswith("buy_"))
async def process_callback_query(callback_query: types.CallbackQuery):
    action = callback_query.data.split("_")[1]
    prices = []
    description = ''
    if action == "1":
        description = 'üî• PRO ‚Äì 99‚ÇΩ'
        prices = [LabeledPrice(label="–†–∞—Å–∫–ª–∞–¥ –∏–∑ 3 –∫–∞—Ä—Ç (–ü—Ä–æ—à–ª–æ–µ ‚Äì –ù–∞—Å—Ç–æ—è—â–µ–µ ‚Äì –ë—É–¥—É—â–µ–µ). –°–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏, —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ, –Ω–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.", amount=99 * 100)]
    elif action == "2":
        description = 'üíé MASTER ‚Äì 199‚ÇΩ'
        prices = [LabeledPrice(label="5 –∫–∞—Ä—Ç (–ü—Ä–æ—à–ª–æ–µ ‚Äì –ù–∞—Å—Ç–æ—è—â–µ–µ ‚Äì –ë—É–¥—É—â–µ–µ ‚Äì –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã ‚Äì –°–æ–≤–µ—Ç). –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏, —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤, –ª–æ–≥–∏—á–Ω–∞—è —Å–≤—è–∑—å —Å–æ–±—ã—Ç–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–æ—Ä–æ—á–µ—Å–∫–∏–º –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ–º. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è.", amount=199 * 100)]
    elif action == "3":
        description = 'üëë ULTIMATE ‚Äì 399‚ÇΩ'
        prices = [LabeledPrice(label="7 –∫–∞—Ä—Ç (–¢–≤–æ–π –ø—É—Ç—å ‚Äì –í–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ ‚Äì –°–∏—Ç—É–∞—Ü–∏—è —Å–µ–π—á–∞—Å ‚Äì –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã ‚Äì –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è ‚Äì –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª ‚Äì –ò—Ç–æ–≥). –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—É–¥—å–±—ã —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º —Å–º—ã—Å–ª–æ–º, –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏. –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –º–æ—â–Ω—ã–º –∏–Ω—Å–∞–π—Ç–æ–º. –î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞.", amount=399 * 100)]

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title=description,
        description=description,
        payload=f'sub{action}',
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        start_parameter='test',
        prices=prices
    )

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def progress_successful_payment(message: Message, state: FSMContext):
    await message.answer("üí´–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("‚ú® –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚ú® \n"
                         "–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –ø–æ–¥—É–º–∞–π, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. üîÆ  \n"
                         "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –∫–∞—Ä—Ç –¢–∞—Ä–æ! üåô‚ú®", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PostPaymentState.waiting_for_post_payment_input)

@dp.message(PostPaymentState.waiting_for_post_payment_input)
async def handle_post_payment_question(message: Message, state: FSMContext):
    question = message.text
    cards = draw_tarot_cards()
    interpretation =  get_tarot_interpretation_llama(question, cards)
    await message.answer(
        f"‚ú® –ì–ª—É–±–∏–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥:\n1Ô∏è‚É£ {cards[0]}\n2Ô∏è‚É£ {cards[1]}\n3Ô∏è‚É£ {cards[2]}\n\nüîÆ –¢—Ä–∞–∫—Ç–æ–≤–∫–∞:\n{interpretation}"
    )
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–î–∞, –≤—Å–µ —Å—É–ø–µ—Ä!"), KeyboardButton(text="–ù–µ—Ç, –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.")]
    ])
    await message.answer(
        "–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–∞—Å–∫–ª–∞–¥?", reply_markup=keyboard
    )

    await state.clear()

@dp.message(F.text == "–î–∞, –≤—Å–µ —Å—É–ø–µ—Ä!")
async def likepos(message: Message):
    await message.answer("üåü–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –∫–∞—Ä—Ç–∞–º! \n"
                         "–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—Ç—Å—è –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–ª–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å. \n"
                         "–ó–∞–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∏ –∫–∞—Ä—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –≤–µ—Å—Ç–∏ —Ç–µ–±—è –ø–æ –ø—É—Ç–∏ —è—Å–Ω–æ—Å—Ç–∏ –∏ –º—É–¥—Ä–æ—Å—Ç–∏. ‚ú® \n"
                         "–¢–≤–æ—è —Å—É–¥—å–±–∞ ‚Äî —ç—Ç–æ –∫–Ω–∏–≥–∞, –∏ —è –ª–∏—à—å –ø–æ–º–æ–≥–∞—é –ø—Ä–æ—á–µ—Å—Ç—å –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã...üîÆ")
    await send_welcome(message)

@dp.message(F.text == "–ù–µ—Ç, –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.")
async def dislikepos(message: Message):
    await message.answer("üåü–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë –¥–æ–≤–µ—Ä–∏–µ! \n"
                         "–ö–∞—Ä—Ç—ã –∏–Ω–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –∑–∞–≥–∞–¥–∫–∞–º–∏, –∏ –∏—Ö –ø–æ—Å–ª–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç–Ω—ã. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –∑–∞–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏ —Ç–µ–∫—É—â–∏–π ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –≥–ª—É–±–∂–µ –∏ —è—Å–Ω–µ–µüîÆ \n"
                         "–¢–≤–æ—ë —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—è –≤–∞–∂–Ω–æ! ‚ú® \n"
                         "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å —à—ë–ø–æ—Ç —Å—É–¥—å–±—ã...")
    await send_welcome(message)


@dp.message()
async def echo_handler(message: Message):
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')

# --- –ó–∞–ø—É—Å–∫ –±–µ–∑ asyncio.run() ---
def run_bot():
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    loop.run_forever()

if __name__ == "__main__":
    run_bot()

#lol
